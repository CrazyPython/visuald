Ddoc

$(P The latest sources of Visual D are available from the github repository at
$(LINK https://github.com/dlang/visuald).)

$(H2 Prerequisites)

$(P You need the following tools to build Visual D:)
$(UL
  $(LI Visual Studio 2013/2015 (other versions might also work, VS 2017 was ok
    until update 15.3.1))
  $(LI a recent version of Visual D)
  $(LI $(LINK2 https://www.microsoft.com/en-us/download/details.aspx?id=40758,
    Visual Studio Integration SDK for VS2013) or enable it during $(LINK2
    https://msdn.microsoft.com/en-us/library/mt683786.aspx, VS 2015) or VS 2017 installation.)
  $(LI Windows SDK 6.0A (included in VS2008) or later (tested with most versions
    up to 10.0.15063.0))
  $(LI DMD 2.071 or newer)
  $(LI coffimplib from ($(LINK http://ftp.digitalmars.com/coffimplib.zip)))
  $(LI for installer: $(LINK2 http://nsis.sourceforge.net/Download, NSIS). External projects
    included in installer:)
    $(UL
      $(LI $(LINK2 https://github.com/rainers/cv2pdb, cv2pdb) checked
        out to ../../cv2pdb/trunk for historic reasons)
      $(LI $(LINK2 https://github.com/rainers/mago, mago) checked
        out to ../../mago)
      $(LI $(LINK2 http://ftp.gnu.org/gnu/binutils/binutils-2.25.tar.gz, binutils 2.25)
        extracted to ../../binutils-2.25)
    )
)

$(P Visual D consists of a number of components that need to be built separately:)
$(UL
  $(LI $(LINK2 https://github.com/dlang/visuald, visuald): the core package loaded as a language service by Visual Studio: visuald_vs10.sln)
  $(LI $(LINK2 https://github.com/rainers/D_Parser/tree/visuald, dparser): the semantic engine
    integrated as a sub module: vdc/abothe/VDServer.sln)
  $(LI vdextensions: some extensions to visuald only accessible via C#: vdextensions/vdextensions.csproj)
  $(LI dbuild: MSBuild integration: msbuild/dbuild/dbuild.csproj)
  $(LI $(LINK2 https://github.com/rainers/mago, mago): the debug engine: ../../mago/MagoDbg_2010.sln)
  $(LI $(LINK2 https://github.com/rainers/cv2pdb, cv2pdb): conversion of CodeView 4 debug information
    into PDB file: ../../trunk/cv2pdb/src/cv2pdb_vs12.sln)
  $(LI pipedmd, dcxxfilt: additional command line tools in the "tools" folder)
)

$(H2 Building Visual D)

$(P Short version:
$(UL
 $(LI Load visuald_vs10.sln into Visual Studio 2013+.)
 $(LI Select configuration Debug/Win32)
 $(LI Build project "build".)
 $(LI Build project "VisualD".)
)
)

$(P Longer version:)

$(P There is an $(LINK2 https://ci.appveyor.com/project/rainers/visuald, AppVeyor project)
that verifies recent changes to the development
branch of Visual D. This can also be used as a reference for the build process.)

$(P The Visual D source code is usually updated to work with the latest release version
of DMD (2.077 as of now), so you should use this release of the compiler when using
the latest svn/git checkout.)

$(P If you want to start developing or debugging, you should load visuald_vs10.sln
in Visual Studio with Visual D installed. Build the "build" project at least once
to build the necessary prerequisites and tools, e.g. D translations from
the Windows and Visual Studio SDK.)

$(P The standard build procedure for the release version is to execute
"nmake install_vs" in the trunk directory. $(B Please check the variable settings at the
top of the Makefile and adjust them to the installation directories on your system.))

$(H2 Deployment)

$(P You should debug Visual D within Visual Studio using a different
branch in the registry, so it does not interfere with your working
environment.)

$(UL
 $(LI VS2010-VS2017: The mechanism has changed with VS2010, as the non-standard registry settings are rebuilt
   on every start of Visual Studio.
  $(UL
   $(LI Copy the files from `$(DOLLAR)(VSINSTALLDIR)\Common7\IDE\Extensions\Rainer Schuetze\VisualD` into the folder
     `$(DOLLAR)(APPDATA)\Local\Microsoft\VisualStudio\12.0\Extensions\VisualD` (replace 12.0 with 14.0 for VS2015, 15.0_`<id>`
     for VS2017 with `<id>` some identifier generated during VS installation))
   $(LI Move the files from `$(DOLLAR)(VSINSTALLDIR)\Common7\IDE\Extensions\Rainer Schuetze\VisualD` into the folder
     `$(DOLLAR)(APPDATA)\Local\Microsoft\VisualStudio\12.0D\Extensions\VisualD` (replace 12.0D with 14.0D for VS2015, 15.0_`<id>`D
     for VS2017 with `<id>` some identifier generated during VS installation))
   $(LI in visuald.pkgdef, replace the path "C:\\Program Files (x86)\\Visual D\\visuald.dll" with your debug build output path.)
   $(LI Modify a line in `$(DOLLAR)(VSINSTALLDIR)\Common7\IDE\devenv.pkgdef:
     $(PRE -"PkgDefSearchPath" = "$ApplicationExtensionsFolder$;$RootFolder$\Common7\IDE\CommonExtensions;$RootFolder$\Common7\IDE\devenv.admin.pkgdef;")
     $(PRE +"PkgDefSearchPath" = "$ApplicationExtensionsFolder$;$RootFolder$\Common7\IDE\CommonExtensions;$AppDataLocalFolder$\Extensions;$RootFolder$\Common7\IDE\devenv.admin.pkgdef;")
    )
   $(LI in the registry, delete hives
    $(UL
     $(LI `HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\14.0D`)
     $(LI `HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\14.0D_Config`)
   ))
   $(LI Start the IDE with the new settings branch via)
    $(PRE devenv /RootSuffix D)
   $(LI Visual D will now be shown in the Extension Manager where it might have to be enabled.)
  )
 )
 $(LI VS2008: To create a configuration named "D"
  $(UL
   $(LI As administrator, execute from the command line:
    $(PRE $(LESS)path-to-visual-studio-sdk$(GREATER)\VisualStudioIntegration\Tools\Bin\VSRegEx.exe getorig 9.0 D)
   )
   $(LI and register the compiled debug plugin with
    $(PRE trunk\nsis\register.bat)
   )
   $(LI The IDE can then be started with the new settings branch via
    $(PRE devenv /RootSuffix D)
   )
  )
 )
)

$(P Good luck!)

Macros:
	TITLE=Building from Source

